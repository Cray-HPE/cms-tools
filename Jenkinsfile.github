/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def goImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-go'

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()        
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = "cray-cmstools-crayctldeploy"
        DESCRIPTION = "Cray Management System - Tests"
        IS_STABLE = getBuildIsStable()
        CMSDEV_SPEC_FILE = "cray-cmstools-crayctldeploy.spec"
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
        GO_VERSION = sh(returnStdout: true, script: 'grep -Eo "^go .*" cmsdev/go.mod | cut -d " " -f2').trim()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                    sh "make runbuildprep"
                    }
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Prepare") {
            agent {
                docker {
                    label 'docker'
                    reuseNode true
                    image "${goImage}:${env.GO_VERSION}"
                }
            }
            steps {
                runLibraryScript("addRpmMetaData.sh", env.CMSDEV_SPEC_FILE)
                sh "make prepare"
            }
        }

        stage("Build RPMs") {
            agent {
                docker {
                    label 'docker'
                    reuseNode true
                    image "${goImage}:${env.GO_VERSION}"
                }
            }
            steps {
                sh "make rpm"
            }
        }

        stage('Publish RPMs') {
            steps {
                publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", os: "noos", arch: "x86_64", isStable: env.IS_STABLE)
                publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: "noos", arch: "src", isStable: env.IS_STABLE)
            }
        }
    }
}
