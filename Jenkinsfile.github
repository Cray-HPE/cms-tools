/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def sleVersion = 'latest'
def goImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-go'
def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

def RPM_ARCH = 'x86_64'

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()        
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = sh(returnStdout: true, script: 'source ./vars ; echo $NAME').trim()
        DESCRIPTION = "Cray Management System - Tests"
        IS_STABLE = getBuildIsStable()
        RPM_SPEC_FILE = sh(returnStdout: true, script: 'source ./vars ; echo $RPM_SPEC_FILE').trim()
        GO_VERSION = sh(returnStdout: true, script: 'grep -Eo "^go .*" cmsdev/go.mod | cut -d " " -f2').trim()
        INSTALL_VENV_BASE_DIR = sh(returnStdout: true, script: 'source ./vars ; echo $INSTALL_VENV_BASE_DIR').trim()
        INSTALL_VENV_PYTHON_BASE_DIR = sh(returnStdout: true, script: 'source ./vars ; echo $INSTALL_VENV_PYTHON_BASE_DIR').trim()
        LOCAL_VENV_PYTHON_SUBDIR_NAME = sh(returnStdout: true, script: 'source ./vars ; echo $LOCAL_VENV_PYTHON_SUBDIR_NAME').trim()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                    sh "make runbuildprep"
                }
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Build cmsdev") {
            agent {
                docker {
                    args '-v /home/jenkins/.ssh:/home/jenkins/.ssh'
                    reuseNode true
                    image "${goImage}:${env.GO_VERSION}"
                }
            }
            steps {
                sh "make build_cmsdev"
            }
        }

        // The RPM build metadata can be added outside of the matrix, because it is just based on the
        // Git commit being built
        stage("Prepare") {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }

            steps {
                runLibraryScript("addRpmMetaData.sh", env.RPM_SPEC_FILE)
                // Just using this as a means to generate the netrc file that we need
                getDockerBuildArgs()
            }
        }

        stage('Build Python Venvs') {
            matrix {
                axes {
                    axis {
                        name 'PY_VERSION'
                        // This list should be a superset of the Python versions listed in setup.py (or identical)
                        // Currently Jenkins does not support dynamically reading in the values from the file to use
                        // as matrix values.
                        values '3.10', '3.11'
                    }
                }

                agent {
                    docker {
                        args "-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc -v ${env.WORKSPACE}/${env.LOCAL_VENV_PYTHON_SUBDIR_NAME}:${env.INSTALL_VENV_PYTHON_BASE_DIR}"
                        reuseNode true
                        image "${pyImage}:${PY_VERSION}"
                    }
                }

                environment {
                    PY_VERSION = "${PY_VERSION}"
                }

                stages {
                    stage('Build Python Venv') {
                        steps {
                            sh "make build_python_venv"
                        }
                    }
                }
            }
        }

        stage('Build & Publish RPMs') {

            agent {
                docker {
                    args '-v /home/jenkins/.ssh:/home/jenkins/.ssh -v /home/jenkins/.netrc:/home/jenkins/.netrc'
                    reuseNode true
                    image "${sleImage}:${sleVersion}"
                }
            }

            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                RPM_ARCH = "${RPM_ARCH}"
            }

            stages {

                stage('Prepare') {
                    steps {
                        sh "make prepare"
                    }
                }

                stage('Build RPMs') {
                    steps {
                        sh "make rpm"
                    }
                }

                stage('Publish Rpms') {
                    steps {
                        script {
                            publishCsmRpms(
                                arch: "${RPM_ARCH}",
                                component: env.NAME,
                                isStable: env.IS_STABLE,
                                os: "noos",
                                pattern: "dist/rpmbuild/*.rpm",
                            )
                            publishCsmRpms(
                                arch: "src",
                                component: env.NAME,
                                isStable: env.IS_STABLE,
                                os: "noos",
                                pattern: "dist/rpmbuild/SRPMS/*.rpm",
                            )
                        }
                    }
                }

            }
        }
    }
}
